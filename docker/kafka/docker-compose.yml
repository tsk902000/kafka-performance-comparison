version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: kafka-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka-broker-1:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-broker-1
    container_name: kafka-broker-1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker-1:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      # Performance optimizations
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 1048576
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 1048576
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      # JMX monitoring
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # Heap settings
      KAFKA_HEAP_OPTS: "-Xmx4G -Xms4G"
      # GC settings for performance
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
    volumes:
      - kafka-1-data:/var/lib/kafka/data
      - ./configs:/etc/kafka/configs
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'

  kafka-broker-2:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-broker-2
    container_name: kafka-broker-2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9093"
      - "9102:9102"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker-2:29093
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      # Performance optimizations
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 1048576
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 1048576
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      # JMX monitoring
      KAFKA_JMX_PORT: 9102
      KAFKA_JMX_HOSTNAME: localhost
      # Heap settings
      KAFKA_HEAP_OPTS: "-Xmx4G -Xms4G"
      # GC settings for performance
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
    volumes:
      - kafka-2-data:/var/lib/kafka/data
      - ./configs:/etc/kafka/configs
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'

  kafka-broker-3:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-broker-3
    container_name: kafka-broker-3
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9094:9094"
      - "9103:9103"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker-3:29094
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      # Performance optimizations
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 1048576
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 1048576
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      # JMX monitoring
      KAFKA_JMX_PORT: 9103
      KAFKA_JMX_HOSTNAME: localhost
      # Heap settings
      KAFKA_HEAP_OPTS: "-Xmx4G -Xms4G"
      # GC settings for performance
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
    volumes:
      - kafka-3-data:/var/lib/kafka/data
      - ./configs:/etc/kafka/configs
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9094"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'

  kafka-jmx-exporter:
    image: sscaling/jmx-prometheus-exporter:0.17.2
    hostname: kafka-jmx-exporter
    container_name: kafka-jmx-exporter
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    ports:
      - "8080:8080"
    environment:
      CONFIG_YML: |
        startDelaySeconds: 0
        ssl: false
        lowercaseOutputName: false
        lowercaseOutputLabelNames: false
        rules:
        - pattern: "kafka.server<type=(.+), name=(.+)PerSec\\w*><>Count"
          name: kafka_server_$1_$2_total
        - pattern: "kafka.server<type=(.+), name=(.+)PerSec\\w*, topic=(.+)><>Count"
          name: kafka_server_$1_$2_total
          labels:
            topic: "$3"
        - pattern: "kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value"
          name: kafka_server_$1_$2
          labels:
            clientId: "$3"
            topic: "$4"
            partition: "$5"
        - pattern: "kafka.server<type=(.+), name=(.+), topic=(.+), partition=(.*)><>Value"
          name: kafka_server_$1_$2
          labels:
            topic: "$3"
            partition: "$4"
        - pattern: "kafka.server<type=(.+), name=(.+), topic=(.+)><>Value"
          name: kafka_server_$1_$2
          labels:
            topic: "$3"
        - pattern: "kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value"
          name: kafka_server_$1_$2
          labels:
            clientId: "$3"
            broker: "$4:$5"
        - pattern: "kafka.server<type=(.+), name=(.+), clientId=(.+)><>Value"
          name: kafka_server_$1_$2
          labels:
            clientId: "$3"
        - pattern: "kafka.server<type=(.+), name=(.+)><>Value"
          name: kafka_server_$1_$2
        - pattern: "kafka.network<type=(.+), name=(.+)><>Value"
          name: kafka_network_$1_$2
        - pattern: "kafka.network<type=(.+), name=(.+)PerSec, request=(.+)><>Count"
          name: kafka_network_$1_$2_total
          labels:
            request: "$3"
        - pattern: "kafka.network<type=(.+), name=(.+)PerSec\\w*><>Count"
          name: kafka_network_$1_$2_total
        - pattern: "kafka.server<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value"
          name: kafka_server_$1_$2
          labels:
            topic: "$3"
            partition: "$4"
        - pattern: "kafka.log<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value"
          name: kafka_log_$1_$2
          labels:
            topic: "$3"
            partition: "$4"
    command:
      - java
      - -XX:+UnlockExperimentalVMOptions
      - -XX:+UseCGroupMemoryLimitForHeap
      - -XX:MaxRAMFraction=1
      - -XshowSettings:vm
      - -jar
      - jmx_prometheus_httpserver.jar
      - "8080"
      - /opt/jmx_exporter/config.yml
    volumes:
      - ./configs/jmx-exporter-config.yml:/opt/jmx_exporter/config.yml
    networks:
      - kafka-network
      - monitoring-network
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker-1:29092,kafka-broker-2:29093,kafka-broker-3:29094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9101
      KAFKA_CLUSTERS_0_JMXHOST: kafka-broker-1
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kafka-network
    restart: unless-stopped

volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-1-data:
    driver: local
  kafka-2-data:
    driver: local
  kafka-3-data:
    driver: local

networks:
  kafka-network:
    driver: bridge
    external: false
  monitoring-network:
    external: true